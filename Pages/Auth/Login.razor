@page "/Login"

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardContent>

                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />

                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />

                </MudCardContent>

                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               @onclick="LoginAsync"
                               Class="ml-auto">
                        Log In
                    </MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@inject AuthenticationStateProvider provider
@inject NavigationManager navManager

@code {

    private RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    private class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    private async Task LoginAsync()
    {
        var authStateProvider = (CustomAuthStateProvider)provider;

        var result = await authStateProvider.Login(model.Email, model.Password);

        if (result.success)
            navManager.NavigateTo("/");
        else
            success = false;
    }
}
