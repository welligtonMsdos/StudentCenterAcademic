@page "/Student"

@if (students != null && students.Count > 0)
{

    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="NewStudent">Novo</MudButton>
    </div>

    <MudTable Items="@students" Dense=true>

        <ToolBarContent>

            <MudText Typo="Typo.h6">Alunos</MudText>

        </ToolBarContent>

        <HeaderContent>

            <MudTh hidden>ID</MudTh>
            <MudTh>NOME</MudTh>
            <MudTh>EMAIL</MudTh>
            <MudTh></MudTh>

        </HeaderContent>

        <RowTemplate>

            <MudTd DataLabel="Id" hidden>@context._id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd><MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              Class="ml-auto"
                              OnClick="@(() => NavigateToEdit(context))">
                              Editar
                   </MudButton>
            </MudTd>

        </RowTemplate>

        <PagerContent>

            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />

        </PagerContent>

    </MudTable>
}

@inject IStudentCenterAuthService authService
@inject NavigationManager navManager
@inject StudentStateService studentStateService

@code {

    private ICollection<UserDto> students;

    protected override async Task OnInitializedAsync()
    {
        students = await authService.GetAllUsers();
    }

    private void NavigateToEdit(UserDto userDto)
    {
        //studentStateService.CurrentStudent = new UserDto(userDto._id, userDto.Name, userDto.Email);

        studentStateService.CurrentStudent = userDto;

        navManager.NavigateTo("/EditStudent");
    }

    private void NewStudent()
    {
        navManager.NavigateTo("/NewStudent");
    }
}

